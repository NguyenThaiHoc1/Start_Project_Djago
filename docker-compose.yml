version: '3.9'

networks:
  cadocr_network:
    driver: bridge

services:

  cadocr_server:
    container_name: cadocr_server
    depends_on:
      - cadocr_pgdb
      - cadocr_minio
    restart: on-failure
    networks:
      - cadocr_network
    ports:
      - ${CADOCR_SERVER_PORT}:80
    environment:
      - CADOCR_SERVER_ENV_FILE=${CADOCR_SERVER_ENV_FILE}
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env

  cadocr_pgdb:
    image: postgres:11-alpine
    container_name: cadocr_pgdb
    restart: on-failure
    environment:
      - POSTGRES_USER=${CADOCR_DB_USER}
      - POSTGRES_PASSWORD=${CADOCR_DB_PASSWORD}
      - POSTGRES_DB=${CADOCR_DB_DBNAME}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - cadocr_pgdata:/var/lib/postgresql/data/
    networks:
      - cadocr_network
    ports:
      - ${CADOCR_DB_PORT}:5432
    env_file:
      - .env

  cadocr_cache:
    image: memcached:alpine
    container_name: cadocr_cache
    restart: on-failure
    networks:
      - cadocr_network
    ports:
      - ${CADOCR_CACHE_PORT}:11211
    env_file:
      - .env

  cadocr_minio:
    image: minio/minio
    container_name: cadocr_minio
    restart: on-failure
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${CADOCR_MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${CADOCR_MINIO_ROOT_PASSWORD}
    volumes:
      - cadocr_miniodata:/data
    networks:
      - cadocr_network
    ports:
      - ${CADOCR_MINIO_PORT}:9000
      - ${CADOCR_MINIO_CONSOLE_PORT}:9001
    env_file:
      - .env
    healthcheck:
      test: [ 'CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live' ]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  cadocr_pgdata:
  cadocr_miniodata: